SList.h

#pragma once

#include<stdio.h>
#include<assert.h>
#include<stdlib.h>

typedef int SLTDataType;
typedef struct SListNode
{
	SLTDataType data;
	struct SListNode* next;
}SListNode;

SListNode* BuySListNode(SLTDataType x);
void SListPrint(SListNode* plist);
void SListPushBack(SListNode** pplist, SLTDataType x);
void SListPushFront(SListNode** pplist, SLTDataType x);
void SListPopBack(SListNode** pplist);
void SListPopFront(SListNode** pplist);


void SListInit(SListNode* plist);
void SListDestory(SListNode* plist);
SListNode* SListFind(SListNode* plist, SLTDataType x);// 在pos的后面进行插入
void SListInsertAfter(SListNode* pos, SLTDataType x);// 在pos的前面进行插入
void SListEraseAfter(SListNode* pos);
void SListRemove(SListNode* plist, SLTDataType x);




SList.c

#define _CRT_SECURE_NO_WARNINGS 1
#include"SList.h"

//无头单向非循环链表增删查改接口
SListNode* BuySListNode(SLTDataType x)
{
	SListNode* node = (SListNode*)malloc(sizeof(SListNode));
	node->data = x;
	node->next = NULL;
	return node;
}

void SListPrint(SListNode* plist)
{
	SListNode* cur = plist;
	while (cur)//cur不为空时
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}

void SListPushBack(SListNode** pplist, SLTDataType x)
{
	SListNode* newnode = BuySListNode(x);
	if (*pplist == NULL)
	{
		*pplist = newnode;
	}
	else
	{
		SListNode* tail = *pplist;
		while (tail->next)
		{
			tail = tail->next;
		}
		tail->next = newnode;
	}
}

void SListPopBack(SListNode** pplist)
{
	SListNode* src = NULL;
	SListNode* dst = *pplist;
	if (dst == NULL || dst->next == NULL)
	{
		free(dst);
		*pplist = NULL;
	}
	else
	{
		while (dst->next)
		{
			src = dst;
			dst = dst->next;
		}
		free(dst);
		dst = NULL;
		src->next = NULL;
	}
	
}

void SListPushFront(SListNode** pplist, SLTDataType x)
{
	SListNode* node=BuySListNode(x);
	if (*pplist == NULL)
	{
		*pplist = node;
	}
	else
	{
		node->next =*pplist;
		*pplist = node;
	}
}

void SListPopFront(SListNode** pplist)
{
	SListNode* first = *pplist;
	if (first == NULL)
	{
		return ;
	}
	if (first->next == NULL)
	{
		free(first);
		*pplist = NULL;
	}
	else
	{
		SListNode* next = first->next;
		free(first);
		*pplist = next;
	}
}

void SListInit(SListNode* plist)
{
	plist -> data = 0;
	plist->next = NULL;
}

void SListDestory(SListNode* plist)
{
	plist->data = 0;
	plist->next = NULL;
}

SListNode* SListFind(SListNode* plist, SLTDataType x)
{
	SListNode* cur = plist;
	while (cur)
	{
		if (cur->data == x)
		{
			return cur;
		}
		cur = cur->next;
	}
	return NULL;
}

void SListInsertAfter(SListNode* pos, SLTDataType x)// 在pos的后面进行插入
{
	assert(pos);
	SListNode* next = pos->next;
	SListNode* dst = BuySListNode(x);
	pos->next = dst;
	dst->next = next;
}

void SListEraseAfter(SListNode* pos)// 在pos的后面进行删除
{
	assert(pos);
	SListNode* next = pos->next;
	if (next)
	{
		SListNode* nextnext = next->next;
		pos->next = nextnext;

		free(next);
	}
}

void SListRemove(SListNode* plist, SLTDataType x)
{
	SListNode* ret = SListFind(plist, x);
	SListNode* next = ret->next;
	if (next)
	{
		SListNode* nextnext = next->next;
		ret->next = nextnext;

		free(next);
	}
}





test.c

#define _CRT_SECURE_NO_WARNINGS 1

#include"SList.h"
void Test1()
{
	SListNode* plist = NULL;
	SListPushBack(&plist, 1);
	SListPushBack(&plist, 2);
	SListPushBack(&plist, 3);
	SListPushBack(&plist, 4);
	SListPushBack(&plist, 5);
	SListPrint(plist);

	SListPopBack(&plist);
	SListPrint(plist);

	SListPushFront(&plist, 0);
	SListPrint(plist);

	SListPopFront(&plist);
	SListPrint(plist);
}
void Test2()
{
	SListNode* plist = NULL;
	SListPushBack(&plist, 1);
	SListPushBack(&plist, 2);
	SListPushBack(&plist, 3);
	SListPushBack(&plist, 4);
	SListPushBack(&plist, 5);
	SListPrint(plist);

	SListNode* ret=SListFind(plist,4);
	if (ret)
     	ret->data = 39;
	SListPrint(plist);

	SListNode* pos = SListFind(plist, 39);
	SListInsertAfter(pos,27);
	SListPrint(plist);
	SListEraseAfter(pos);
	SListPrint(plist);

	SListRemove(plist, 39);
	SListPrint(plist);
}
int main()
{
	Test2();
	return 0;
}